---
- name: Setup AWS Infrastructure for ABC Retail
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Create VPC for ABC Retail
      amazon.aws.ec2_vpc_net_info:
        region: us-east-1
        filters:
          "tag:Name": "abc-retail-vpc"
      register: vpc_info

    - name: Create VPC if not exists
      amazon.aws.ec2_vpc_net:
        region: us-east-1
        name: "abc-retail-vpc"
        cidr_block: "10.0.0.0/16"
        tags:
          Name: "abc-retail-vpc"
          Environment: "production"
      register: vpc_result
      when: vpc_info.vpcs | length == 0

    - name: Create Internet Gateway
      amazon.aws.ec2_internet_gateway:
        region: us-east-1
        vpc_id: "{{ vpc_result.vpc.id if vpc_result is defined else vpc_info.vpcs[0].id }}"
        tags:
          Name: "abc-retail-igw"

    - name: Create Public Subnet
      amazon.aws.ec2_subnet:
        region: us-east-1
        vpc_id: "{{ vpc_result.vpc.id if vpc_result is defined else vpc_info.vpcs[0].id }}"
        cidr: "10.0.1.0/24"
        az: "us-east-1a"
        tags:
          Name: "abc-retail-public-subnet"

    - name: Create Security Group for Application
      amazon.aws.ec2_group:
        region: us-east-1
        name: "abc-retail-app-sg"
        description: "Security group for ABC Retail application"
        vpc_id: "{{ vpc_result.vpc.id if vpc_result is defined else vpc_info.vpcs[0].id }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 8080
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 9090
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 3000
            cidr_ip: 0.0.0.0/0
        tags:
          Name: "abc-retail-app-sg"

    - name: Create Security Group for Kubernetes
      amazon.aws.ec2_group:
        region: us-east-1
        name: "abc-retail-k8s-sg"
        description: "Security group for Kubernetes cluster"
        vpc_id: "{{ vpc_result.vpc.id if vpc_result is defined else vpc_info.vpcs[0].id }}"
        rules:
          - proto: tcp
            ports:
              - 6443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 10250
            cidr_ip: 10.0.0.0/16
          - proto: tcp
            ports:
              - 30000-32767
            cidr_ip: 0.0.0.0/0
        tags:
          Name: "abc-retail-k8s-sg"

    - name: Create EC2 Key Pair
      amazon.aws.ec2_key:
        region: us-east-1
        name: "abc-retail-key"
        force: yes
      register: key_pair

    - name: Save private key
      copy:
        content: "{{ key_pair.key.private_key }}"
        dest: "./abc-retail-key.pem"
        mode: '0600'
      when: key_pair.key.private_key is defined

    - name: Create Jenkins Server
      amazon.aws.ec2_instance:
        region: us-east-1
        image_id: ami-0c02fb55956c7d316  # Amazon Linux 2
        instance_type: t3.medium
        key_name: "abc-retail-key"
        vpc_subnet_id: "{{ subnet_result.subnet.id }}"
        security_group: "abc-retail-app-sg"
        name: "abc-retail-jenkins"
        tags:
          Name: "abc-retail-jenkins"
          Role: "jenkins"
        user_data: |
          #!/bin/bash
          yum update -y
          yum install -y docker git java-1.8.0-openjdk maven
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker run -d -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts

    - name: Create Kubernetes Master Node
      amazon.aws.ec2_instance:
        region: us-east-1
        image_id: ami-0c02fb55956c7d316
        instance_type: t3.medium
        key_name: "abc-retail-key"
        vpc_subnet_id: "{{ subnet_result.subnet.id }}"
        security_group: "abc-retail-k8s-sg"
        name: "abc-retail-k8s-master"
        tags:
          Name: "abc-retail-k8s-master"
          Role: "kubernetes-master"
        user_data: |
          #!/bin/bash
          yum update -y
          yum install -y docker git
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          # Install Kubernetes
          cat <<EOF > /etc/yum.repos.d/kubernetes.repo
          [kubernetes]
          name=Kubernetes
          baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
          enabled=1
          gpgcheck=1
          repo_gpgcheck=1
          gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
          EOF
          yum install -y kubelet kubeadm kubectl
          systemctl enable kubelet
          systemctl start kubelet

    - name: Create Kubernetes Worker Nodes
      amazon.aws.ec2_instance:
        region: us-east-1
        image_id: ami-0c02fb55956c7d316
        instance_type: t3.small
        key_name: "abc-retail-key"
        vpc_subnet_id: "{{ subnet_result.subnet.id }}"
        security_group: "abc-retail-k8s-sg"
        name: "abc-retail-k8s-worker-{{ item }}"
        tags:
          Name: "abc-retail-k8s-worker-{{ item }}"
          Role: "kubernetes-worker"
        user_data: |
          #!/bin/bash
          yum update -y
          yum install -y docker git
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          # Install Kubernetes
          cat <<EOF > /etc/yum.repos.d/kubernetes.repo
          [kubernetes]
          name=Kubernetes
          baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
          enabled=1
          gpgcheck=1
          repo_gpgcheck=1
          gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
          EOF
          yum install -y kubelet kubeadm kubectl
          systemctl enable kubelet
          systemctl start kubelet
      loop:
        - 1
        - 2

    - name: Create Monitoring Server
      amazon.aws.ec2_instance:
        region: us-east-1
        image_id: ami-0c02fb55956c7d316
        instance_type: t3.small
        key_name: "abc-retail-key"
        vpc_subnet_id: "{{ subnet_result.subnet.id }}"
        security_group: "abc-retail-app-sg"
        name: "abc-retail-monitoring"
        tags:
          Name: "abc-retail-monitoring"
          Role: "monitoring"
        user_data: |
          #!/bin/bash
          yum update -y
          yum install -y docker git python3-pip
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          pip3 install docker-compose

    - name: Wait for instances to be running
      amazon.aws.ec2_instance_info:
        region: us-east-1
        filters:
          "tag:Name": "abc-retail-*"
      register: instances_info

    - name: Display instance information
      debug:
        msg: |
          AWS Infrastructure created successfully!
          
          Jenkins Server: {{ instances_info.instances | selectattr('tags.Name', 'equalto', 'abc-retail-jenkins') | map(attribute='public_ip_address') | first }}
          Kubernetes Master: {{ instances_info.instances | selectattr('tags.Name', 'equalto', 'abc-retail-k8s-master') | map(attribute='public_ip_address') | first }}
          Monitoring Server: {{ instances_info.instances | selectattr('tags.Name', 'equalto', 'abc-retail-monitoring') | map(attribute='public_ip_address') | first }}
          
          Private Key saved to: ./abc-retail-key.pem 