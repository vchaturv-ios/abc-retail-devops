---
- name: Setup ABC Retail DevOps on AWS Free Tier
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Create VPC for ABC Retail
      amazon.aws.ec2_vpc_net_info:
        region: us-east-1
        filters:
          "tag:Name": "abc-retail-vpc"
      register: vpc_info

    - name: Create VPC if not exists
      amazon.aws.ec2_vpc_net:
        region: us-east-1
        name: "abc-retail-vpc"
        cidr_block: "10.0.0.0/16"
        tags:
          Name: "abc-retail-vpc"
          Environment: "free-tier"
      register: vpc_result
      when: vpc_info.vpcs | length == 0

    - name: Set VPC ID fact from vpc_result
      set_fact:
        abc_vpc_id: "{{ vpc_result.vpc.id }}"
      when: vpc_result is defined and vpc_result.vpc is defined

    - name: Set VPC ID fact from vpc_info (fallback)
      set_fact:
        abc_vpc_id: "{{ vpc_info.vpcs[0].id }}"
      when: vpc_result is not defined or vpc_result.vpc is not defined

    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        region: us-east-1
        vpc_id: "{{ abc_vpc_id }}"
        state: present
        tags:
          Name: "abc-retail-igw"

    - name: Create Public Subnet
      amazon.aws.ec2_vpc_subnet:
        region: us-east-1
        vpc_id: "{{ abc_vpc_id }}"
        cidr: "10.0.1.0/24"
        az: "us-east-1a"
        state: present
        map_public: true
        tags:
          Name: "abc-retail-public-subnet"
      register: subnet_result

    - name: Create Security Group for Free Tier
      amazon.aws.ec2_group:
        region: us-east-1
        name: "abc-retail-free-sg"
        description: "Security group for ABC Retail Free Tier"
        vpc_id: "{{ abc_vpc_id }}"
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 8080
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 9090
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 3000
            cidr_ip: 0.0.0.0/0
        state: present
        tags:
          Name: "abc-retail-free-sg"

    - name: Create EC2 Key Pair
      amazon.aws.ec2_key:
        region: us-east-1
        name: "abc-retail-free-key"
        state: present
        force: true
      register: key_pair

    - name: Save private key
      copy:
        content: "{{ key_pair.key.private_key }}"
        dest: "./abc-retail-free-key.pem"
        mode: '0600'
      when: key_pair.key.private_key is defined

    - name: Create Jenkins Server (t2.micro - FREE)
      amazon.aws.ec2_instance:
        region: us-east-1
        image_id: ami-0c02fb55956c7d316  # Amazon Linux 2
        instance_type: t2.micro  # FREE TIER
        key_name: "abc-retail-free-key"
        vpc_subnet_id: "{{ subnet_result.subnet.id }}"
        security_group: "abc-retail-free-sg"
        name: "abc-retail-jenkins-free"
        tags:
          Name: "abc-retail-jenkins-free"
          Role: "jenkins"
        user_data: |
          #!/bin/bash
          yum update -y
          yum install -y docker git java-1.8.0-openjdk maven
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker run -d -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts
        network:
          assign_public_ip: true

    - name: Create Application Server (t2.micro - FREE)
      amazon.aws.ec2_instance:
        region: us-east-1
        image_id: ami-0c02fb55956c7d316  # Amazon Linux 2
        instance_type: t2.micro  # FREE TIER
        key_name: "abc-retail-free-key"
        vpc_subnet_id: "{{ subnet_result.subnet.id }}"
        security_group: "abc-retail-free-sg"
        name: "abc-retail-app-free"
        tags:
          Name: "abc-retail-app-free"
          Role: "application"
        user_data: |
          #!/bin/bash
          yum update -y
          yum install -y docker git java-1.8.0-openjdk maven
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          # Install kubectl for local Kubernetes
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/
          # Install minikube for local Kubernetes
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x minikube-linux-amd64
          mv minikube-linux-amd64 /usr/local/bin/minikube
        network:
          assign_public_ip: true

    - name: Create Monitoring Server (t2.micro - FREE)
      amazon.aws.ec2_instance:
        region: us-east-1
        image_id: ami-0c02fb55956c7d316  # Amazon Linux 2
        instance_type: t2.micro  # FREE TIER
        key_name: "abc-retail-free-key"
        vpc_subnet_id: "{{ subnet_result.subnet.id }}"
        security_group: "abc-retail-free-sg"
        name: "abc-retail-monitoring-free"
        tags:
          Name: "abc-retail-monitoring-free"
          Role: "monitoring"
        user_data: |
          #!/bin/bash
          yum update -y
          yum install -y docker git python3-pip
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ec2-user
          pip3 install docker-compose
        network:
          assign_public_ip: true

    - name: Wait for instances to be running
      amazon.aws.ec2_instance_info:
        region: us-east-1
        filters:
          "tag:Name": "abc-retail-*-free"
      register: instances_info

    - name: Debug instance info structure
      debug:
        var: instances_info

    - name: Display free tier setup information
      debug:
        msg: |
          AWS Free Tier setup completed successfully!
          
          Jenkins Server: {{ instances_info.instances | selectattr('tags.Name', 'equalto', 'abc-retail-jenkins-free') | map(attribute='public_ip_address') | first }}
          Application Server: {{ instances_info.instances | selectattr('tags.Name', 'equalto', 'abc-retail-app-free') | map(attribute='public_ip_address') | first }}
          Monitoring Server: {{ instances_info.instances | selectattr('tags.Name', 'equalto', 'abc-retail-monitoring-free') | map(attribute='public_ip_address') | first }}
          
          Private Key saved to: ./abc-retail-free-key.pem
          
          COST: $0 (All services are within AWS Free Tier limits) 